{"config":{"lang":["ja"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> a.py<pre><code>my_list = [\"leaf\", \"cherry\", \"fish\"]\n# Brute force method using bubble sort\nmy_list = [\"leaf\", \"cherry\", \"fish\"]\nsize = len(my_list)\nfor i in range(size):\nfor j in range(size):\nif my_list[i] &lt; my_list[j]:\ntemp = my_list[i]\nmy_list[i] = my_list[j]\nmy_list[j] = temp\n# Generic list sort *fastest*\nmy_list.sort()\n# Casefold list sort\nmy_list.sort(key=str.casefold)\n# Generic list sorted\nmy_list = sorted(my_list) \n# Custom list sort using casefold (&gt;= Python 3.3)\nmy_list = sorted(my_list, key=str.casefold) \n# Custom list sort using current locale \nimport locale\nfrom functools import cmp_to_key\nmy_list = sorted(my_list, key=cmp_to_key(locale.strcoll)) \n# Custom reverse list sort using casefold (&gt;= Python 3.3)\nmy_list = sorted(my_list, key=str.casefold, reverse=True)\n</code></pre>"},{"location":"page3/","title":"Page3","text":""},{"location":"page3/#abc","title":"abc","text":"\u5641\u721b\u6578<pre><code>ethernet_devices = [1, [7], [2], [8374163], [84302738]]\nusb_devices = [1, [7], [1], [2314567], [0]]\n# The long way\nall_devices = [\nethernet_devices[0] + usb_devices[0],\nethernet_devices[1] + usb_devices[1],\nethernet_devices[2] + usb_devices[2],\nethernet_devices[3] + usb_devices[3],\nethernet_devices[4] + usb_devices[4]\n]\n# Some comprehension magic\nall_devices = [x + y for x, y in zip(ethernet_devices, usb_devices)]\n# Let's use maps\nimport operator \nall_devices = list(map(operator.add, ethernet_devices, usb_devices))\n# We can't forget our favorite computation library\nimport numpy as np \nall_devices = np.add(ethernet_devices, usb_devices)\n</code></pre>"},{"location":"page4/","title":"Page4","text":"<p>Advertisement :)</p> <ul> <li>pica - high quality and fast image   resize in browser.</li> <li>babelfish - developer friendly   i18n with plurals support and easy syntax.</li> </ul> <p>You will like those projects!</p>"},{"location":"page4/#h1-heading-8-","title":"h1 Heading 8-)","text":""},{"location":"page4/#h2-heading","title":"h2 Heading","text":""},{"location":"page4/#h3-heading","title":"h3 Heading","text":""},{"location":"page4/#h4-heading","title":"h4 Heading","text":""},{"location":"page4/#h5-heading","title":"h5 Heading","text":""},{"location":"page4/#h6-heading","title":"h6 Heading","text":""},{"location":"page4/#horizontal-rules","title":"Horizontal Rules","text":""},{"location":"page4/#typographic-replacements","title":"Typographic replacements","text":"<p>Enable typographer option to see result.</p> <p>(c) (C) (r) (R) (tm) (TM) (p) (P) +-</p> <p>test.. test... test..... test?..... test!....</p> <p>!!!!!! ???? ,,  -- ---</p> <p>\"Smartypants, double quotes\" and 'single quotes'</p>"},{"location":"page4/#emphasis","title":"Emphasis","text":"<p>This is bold text</p> <p>This is bold text</p> <p>This is italic text</p> <p>This is italic text</p> <p>~~Strikethrough~~</p>"},{"location":"page4/#blockquotes","title":"Blockquotes","text":"<p>Blockquotes can also be nested...</p> <p>...by using additional greater-than signs right next to each other...</p> <p>...or with spaces between arrows.</p>"},{"location":"page4/#lists","title":"Lists","text":"<p>Unordered</p> <ul> <li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li> <li>Sub-lists are made by indenting 2 spaces:</li> <li>Marker character change forces new list start:<ul> <li>Ac tristique libero volutpat at</li> <li>Facilisis in pretium nisl aliquet</li> <li>Nulla volutpat aliquam velit</li> </ul> </li> <li>Very easy!</li> </ul> <p>Ordered</p> <ol> <li>Lorem ipsum dolor sit amet</li> <li>Consectetur adipiscing elit</li> <li> <p>Integer molestie lorem at massa</p> </li> <li> <p>You can use sequential numbers...</p> </li> <li>...or keep all the numbers as <code>1.</code></li> </ol> <p>Start numbering with offset:</p> <ol> <li>foo</li> <li>bar</li> </ol>"},{"location":"page4/#code","title":"Code","text":"<p>Inline <code>code</code></p> <p>Indented code</p> <pre><code>// Some comments\nline 1 of code\nline 2 of code\nline 3 of code\n</code></pre> <p>Block code \"fences\"</p> <pre><code>Sample text here...\n</code></pre> <p>Syntax highlighting</p> <pre><code>var foo = function (bar) {\nreturn bar++;\n};\nconsole.log(foo(5));\n</code></pre>"},{"location":"page4/#tables","title":"Tables","text":"Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. <p>Right aligned columns</p> Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files."},{"location":"page4/#links","title":"Links","text":"<p>link text</p> <p>link with title</p> <p>Autoconverted link https://github.com/nodeca/pica (enable linkify to see)</p>"},{"location":"page4/#images","title":"Images","text":"<p>Like links, Images also have a footnote style syntax</p> <p></p> <p>With a reference later in the document defining the URL location:</p>"},{"location":"page4/#plugins","title":"Plugins","text":"<p>The killer feature of <code>markdown-it</code> is very effective support of syntax plugins.</p>"},{"location":"page4/#emojies","title":"Emojies","text":"<p>Classic markup:  :crush:  :tear:  </p> <p>Shortcuts (emoticons): :-) :-( 8-) ;)</p> <p>see how to change output with twemoji.</p>"},{"location":"page4/#subscript-superscript","title":"Subscript / Superscript","text":"<ul> <li>19^th^</li> <li>H~2~O</li> </ul>"},{"location":"page4/#_1","title":"\\ <p>++Inserted text++</p>","text":""},{"location":"page4/#_2","title":"\\ <p>Marked text</p>","text":""},{"location":"page4/#footnotes","title":"Footnotes <p>Footnote 1 link1.</p> <p>Footnote 2 link2.</p> <p>Inline footnote^[Text of inline footnote] definition.</p> <p>Duplicated footnote reference2.</p>","text":""},{"location":"page4/#definition-lists","title":"Definition lists <p>Term 1</p> <p>:   Definition 1 with lazy continuation.</p> <p>Term 2 with inline markup</p> <p>:   Definition 2</p> <pre><code>    { some code, part of Definition 2 }\n\nThird paragraph of definition 2.\n</code></pre> <p>Compact style:</p> <p>Term 1   ~ Definition 1</p> <p>Term 2   ~ Definition 2a   ~ Definition 2b</p>","text":""},{"location":"page4/#abbreviations","title":"Abbreviations <p>This is HTML abbreviation example.</p> <p>It converts \"HTML\", but keep intact partial entries like \"xxxHTMLyyy\" and so on.</p> <p>*[HTML]: Hyper Text Markup Language</p>","text":""},{"location":"page4/#custom-containers","title":"Custom containers <p>::: warning here be dragons :::</p>   <ol> <li> <p>Footnote can have markup</p> <p>and multiple paragraphs.\u00a0\u21a9</p> </li> <li> <p>Footnote text.\u00a0\u21a9\u21a9</p> </li> </ol>","text":""}]}